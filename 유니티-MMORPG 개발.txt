// -----------------------------------
// ---- c# 기초 프로그래밍 입문
// -----------------------------------

cmd 사용.
빌드 :   코딩한 것들을 컴파일해서 번역하는 과정.  솔루션 빌드 -> 전체 빌드, 
             CSharp 빌드 ->특정프로젝트만 빌드.  
			 
// byte(0~255), short(-3만~3만), int(-21억~21억) ,long(8byte짜리 바구니)
// sbyte(signed byte -128~127), ushort(0~6만), uint(0~43억), ulong			 
			 
// 계산기 사용. 셋팅은 프로그래머로.

            // 데이터 + 로직
            // 체력 123, 어딘가 저장. 체력 0이 되면 어떤 로직 실행.
            // 1 2 3 5 10 100 << 자연수
            // -15 0 + 15 

            // 0b11111111 = 255
            // byte(0~255), short(-3만~3만), int(-21억~21억) ,long(8byte짜리 바구니)
            // sbyte(signed byte -128~127), ushort(0~6만), uint(0~43억), ulong

            // 10진수
            // 00 01 02 03 04 05 06 07 08 09
            // 10

            // 2진수(binery)
            // 0~1
            // 0b00 0b01 0b10 0b11 0b100
            // 4개씩 끊어서 변환.(2진수 16진수 변환)
            // 0b10001111 = 0x 1000 1111
            //              0x   8    F

            // 16진수(hex)
            // 0~9 a b c d e f
            // 0x00 0x01 0x02 .. 0x0F
            // 0x10

            // 2의 보수
            // 1 1 1 1 1 1 1 1
            // 7     4       0번째
            // 7번째 숫자만 음수 표현  1이면 -128.   -0 +0 없이 하나의 0 사용 가능.
            // -1은 어떻게 표현 하나?  -128 +127  전부 11111111 하면 된다.
            //  또다른 장점. 양수의 음수 계산 쉽다.
            //  00110100 ->비트를 뒤바꾼다. 11001011
            //  그다음 1을 더해준다. 11001100   그러면 52가 -52로 바뀜.


            // Boolean type. 0,1만 필요한데, 왜 byte? 컴터 연산 byte로 다루는것이 훨씬 빠름.
            bool b;
            b = true;
            b = false;

            // 소수.  정수는 2의 진수를 이용해서 컴퓨터가 데이터를 조정. 
            // 소수는 개념이 완전 다르다. 복잡한 알고리즘 사용. 정수연산 보다 비싼 연산.
            // 피치 못할 사정으로 소수를 꼭 사용해야하는 경우에만 사용.
            // 4바이트
            float f = 3.14f;  // f 반드시 써주자. 소수는 기본이 더블.

            // 8바이트
            double d = 3.14;    // 범위 넓고 정밀하다.

            // 문자를 표현하기 위한 type. 2byte. 얘도 숫자를 저장하는 타입이다. 그럼 왜 short가 아닌가?
            // 덧셈 뺄샘 연산 하는게 아니라 문자를 표현하기 위해 따로 빼논 타입.
            char c ='a'; // 'abcd' <--  문자 아님 저장 못함.

            // string 타입. 한국어로 문자열. 캐릭터의 집합.
            string str = "Hello World";
            Console.WriteLine(str);

            /* 형식 변환 */
            // 1. 바구니 크기가 다른 경우!
            //int a = 1000;
            //short b = (short)a; // 명시적 cast. 하지만 이경우 분실 발생.
            
            // int a = 0x0FFFFFFF;
            // short b =(short)a;  // 0xFFF FFFF -> 상위 2byte 날라감. 하위 2바이트 0xFFFF 이건 -1.

            short b = 100;
            int a = b;

            // 2. 바구니 크기는 같긴 한데, 부호가 다를 경우
            byte c = 255;
            sbyte sb = (sbyte)c;
            //underflow, overflow
            // 0xFF = 0b11111111 = -1

            // 3. 소수
            float f = 3.1414f;
            double d = f; // 정확한 숫자가 아니라 인접한 숫자로 변환 한다는것 알고 있을것.
                          // 소수끼리 비교할때는 정확한 수치를 볼게 아니라. 
                          //어느정도 오차를 두고 비교를 해야지 우리가 예측하는 일반적인
                          // 결과가 나올 수 있다.
            
			
			/* 데이터 연산 + - * / % */
            int hp = 100;
            Console.WriteLine(hp++); // 100 출력.

            // hp = 2 * 100 + 1;
            // hp = (1 + 2) * 100;
            // hp = 100 % 3; // (33 * 3 + 1) hp에는 1 저장.
            // hp++; // hp = hp + 1;
            // ++hp; 

            // 비교
            int hp = 100;
            int level = 50;
            bool isAlive = (hp > 0); // hp가 100보다 작습니까? 질문에 대한 답을 저장.
            bool isHighLevel = (level >= 40);

            // a = 살아있는 고렙 유저인가요?
            bool a = isAlive && isHighLevel;

            // b = 살아있거나, 고랩 유저이거나, 둘 중 하나인가요?
            bool b = isAlive || isHighLevel;

            // c = 죽은 유저인가요?
            bool c = !isAlive;		

           /* 자료형 word 와 dword

                word는 예전부터 cpu가 한번에 처리할수 있는 양을 말함.

                word 자료형이 정의된 minwindef.h 헤더파일로 가보면 


                typedef unsigned long       DWORD;
                typedef int                 BOOL;
                typedef unsigned char       BYTE;
                typedef unsigned short      WORD;
 

                위와 같이 unsigned short로 되어있음.

                word나 unsigned short나 같은건데, 그냥 typedef로 만들어 놨단 것은 
                의미적인 부분을 강조하기 위한 것임.(해당 자료형을 사용하면 cpu가 한번 일하면 되는 사이즈라는 뜻.)

                unsigned short는 16비트.
                word가 16비트로 처리된 이유는 이전 16비트cpu 환경에서 작성된 프로그램을 이후 32비트에서도 돌아가도록 하는 호완성의 측면.

                만약 32비트 cpu 환경에서 작업한다면 32비트 워드인 dword를...
                64비트의 경우에는 quadword를 사용하면 이후 혹시라도 128비트 cpu가 나온다 하더라도 호환성에 좋은 프로그램이 됨.
             */

            int num = 1;

			
			///////////////////////
            // 비트 연산
            // << >> &(and) |(or) ^(xor) ~(not)
			///////////////////////

            // Left Shift Operation. 왼쪽으로 한칸 밀었다.  1이 한칸이동.
            // 0000 0000 0000 0000 0000 0000 0000 0001
            // 0000 0000 0000 0000 0000 0000 0000 0010   1이 한칸이동.
            num = num << 1;
            Console.WriteLine(num);

            num = 1;
            // 0000 0000 0000 0000 0000 0000 0000 0001
            // 0000 0000 0000 0000 0000 0000 0000 1000   1이 3칸이동.
            num = num << 3;
            Console.WriteLine(num);

            // Rigth Shift Opreration.오른쪽으로 한칸 이동.
            // 기존의 부호비트를 그대로 유지한채 이동한다.  *) 중요사항 까먹지 말것
            // 그래서 그냥 생각할거 없이 unsigned 사용하자.
            int num2 = -2147483640;
            num2 = num2 >> 1;
            // 1000 0000 0000 0000 0000 0000 0000 1000
            // 1100 0000 0000 0000 0000 0000 0000 0100  오른쪽으로 한칸씩 이동. 부호값은 유지.
            Console.WriteLine(num2);

            // ^(xor) 배타적 논리합.  값이 다를 경우에만 1.  0 xor 1 -> 1,  0 xor 0 -> 0, ..
            int id = 0; // 공간이 많아서 여러 정보를 저장할 수 있다.

            // 0000 0000 0000 0000 0000 0000 0000 0000
            // 상위   4bit: 어떤 유형인지. 객체의 타입. 몬스터, Player, NPC
            // 그다음 4bit: 소속된 위치, 지역. ... 등등 비트연산 활용.

            // 암호학에서 중요하게사용.
            // 똑같은 숫자(예제에서 transData값) 에 똑같은 값을 xor을 2번을 하면 원래의 값이 다시 튀어나온다.
            // 서버 클라이언트간 암호화해서 통신할때 사용. 
            int transData = 123;
            int key = 401; // 어떤 랜덤값.

            int a = transData ^ key;  // transData를 암호화해서 클라이언트로 전송

            int b = a ^ key;  // 클라이언트는 받은 데이터를 key를 이용해서 원래의 데이터 얻음.
			
			 
			///////////////////////////////
            // 데이터 마무리, 할당 연산
			///////////////////////////////
			int a;
            a = 100;
            a += 1;
            a -= 1;
            a *= 1;

            // 우선 순위
            // 1. ++ --
            // 2. * / %
            // 3. + -
            // 4. << >>
            // 5. < >
            // 6. == !=
            // 7. &
            // 8. ^
            // 9. |
            // ....

            // 괄호를 사용해서 우선 순위를 강제로 높이자. 쓰는 사람도 코드를 읽는 사람도 좋다.
            a = (3 + 2) * 3;


            // 새로운 형식. 조커 카드.
            var num = 3; // int32로 강제로 변환된걸 알수있다.
            var num2 = "Hello World"; // string으로 선언한 것과 똑같다.

            // 명시적으로 타입을 정하지 않고 컴파일러가 알아서 찾게끔 맞춰주는 문법.
            // C# 에서는 쓰지 말자. 그냥 알고만 있자.
			 
			 
			 // ---- if와 else
			 if (isDead)  // if 하고 한칸 띄는게 가장 권장.
			 {
			 }
			 else
			 {
			 }
			 
			 // ---- switch
			 가독성이 좋아서 switch  문을 쓸 수 있으면 if문 보다 먼저 꼭 사용한다.
			 로직이 복잡할 경우에는 if문 사용 권장.
			 
			 // ---- 삼항연산자
			 int number = 25;
			 
			 // 짝수 홀수.
			 // bool isPair = (조건 ? 맞을때 : 틀릴때);
			 bool isPair = ((number % 2 ) == 0 ? treu : false);
			 
			 https://www.inflearn.com/course/%EC%9C%A0%EB%8B%88%ED%8B%B0-MMORPG-%EA%B0%9C%EB%B0%9C-part1/lecture/32791?tab=note&speed=1.5
			// ---- 가위-바위-보 게임
			Randon rand = new Random();
			int aiChoice = rand.Next(0,3); // 0~2사이의 랜덤 값.
			
			// 변환함수
			int choice = Convert.ToInt32(Console.ReadLine()); // 엔터키 입력할때까지 콘솔에서 값을 읽어들인다. 한줄을 받았다가 숫자로 바꿔서 choice에 입력.
			 
			 
			 // --상수와 열거형
			 
			 class Program
			 {
				enum Choice
				{
					Rock,		// default는 0. 1씩 증가. 값입력 가능.
					Paper,
					Scissors
				}
				
				 static void Main(string[] args)
				 {
					 const int ROCK = 1;
					 int choice = Convert.ToInt32(Console.ReadLine());
					 
					 switch (choice)
					 {
						// 하드코딩된 숫자 사용하지 말것.
						// 변수 사용 못함. 상수만 가능. const 붙이거나 열거형 사용.
						case (int)Choice.Rock:
						//case ROCK: 
							break;
						
					}
				}
			}
			 
		// ---- while
            // 거울아~ 거울아~
            string answer;

            // 한번은 꼭 실행, 그리고 while 조건 check. 
            do
            {
                Console.WriteLine("시연이는 이쁜가요? (y/n) : ");
                answer = Console.ReadLine();
            } while (answer != "y");

            Console.WriteLine("네, 정말 시연이는 이쁘고 멋진 사람입니다!");			 
			 
		// ---- for	 
			// for (초기화식 ; 조건식; 반복식)
			for(int i = 0; i < 5; i++)  // 실행 순서는 1; 2; 4
			{
				// 작업  <-- 실행은 3번째.
			}
			 
		// ---- break, continue
			// 소수는 1 과 자기자신으로만 나뉘는 숫자.
			break, continue는 반복문에서 흐름을 제어.
			 
		*) cw 누른후 탭키 누르면 -> Console.WriteLine 자동완성됨.
		
		*) $키 사용하는게 최신.
			Console.WriteLine("3으로 나뉘는 숫자 발견 : {0}", i); // 출력인자가 많아지면 복잡해져서 사용하기힘들다.
			Console.WriteLine($"3으로 나뉘는 숫자 발견 : {i}");  // 이렇게 하면 된다.
			 
		*) break point  걸고 F10 누르면 한줄씩 실행.
		
		// ---- 함수
        // Method (C++에서 함수)
        // 한정자 반환형식 이름(매개변수목록)
        static void HelloWorld()
        {
            Console.WriteLine("Hello World!");
        }

        // 덧셈 함수
        static int Add(int a, int b) // a, b는 내부에서만 유효.
        {
            int result = a + b;
            return result;
        }

        static void AddOne(ref int number)  // ref <-- int 값을 참조하는 변수를 넘기겠다.
        {
            number = number + 1;
        }
        static void AddOne2(int number)
        {
            number = number + 1;
        }

        static void Main(string[] args)
        {
            int a = 4;
            int b = 5;

            // 복사(짭퉁), 참조(진퉁)
            int c = 0;
            Program.AddOne2(c); // c가 가지고 있는 값을 넘김.
            Program.AddOne(ref c); // 참조값으로 c의 메모리의 값을 변경 시키고 싶다.

            Console.WriteLine(c);

            int result = Program.Add(a, b);
            Console.WriteLine(result);

            //Program.HelloWorld();		
		
		// ---- ref, out
		class Program
		{
			/*
			 * 2가지 함수 모두 유효. 그럼 디자인상 우린 어떤 것을 선택해야 할까?
			 * 두번째 버전이 훨씬 좋다. return 값으로 실제 값이 아닌 다른 값으로
			 * 반환한 후에 필요에 따라 값을 원본에 넣던지 따르게 사용하던지.
			 * 이게 일반적인 방법이다.
			 * 
			 * 진퉁을 꼭 써야하는 경우도 있다. 예) Swap() 같은 경우. 즉, 진퉁 값을 바꾸는 경우.
			 * 이런 경우는 필수적이고 굉장히 유용하다.
			 */
			static void AddOne(ref int number)
			{
				number = number + 1;
			}
			static int AddOne2(int number)
			{
				return number + 1;
			}

			static void Swap(ref int a, ref int b)
			{
				int temp = a;
				a = b;
				b = temp;
			}
			static void Main(string[] args)
			{
				// 복사(짭퉁), 참조(진퉁)
				int a = 0;
				Program.AddOne(ref a);
				Console.WriteLine(a);

				int b = Program.AddOne2(a); // a가 가지고 있는 값을 넘김.
				a = b;
				Console.WriteLine(a);

				int num1 = 1;
				int num2 = 2;
				Program.Swap(ref num1, ref num2);
				Console.WriteLine(num1);
				Console.WriteLine(num2);
			}
		}
		
		// ---- out
		// out 도 참조를 한다. 즉 진퉁으로 작업을 한다.
        static void Divide(int a, int b, out int result1, out int result2)
        {
            result1 = a / b;
            result2 = a % b;
        }
       static void Main(string[] args)
        {
            int num1 = 10;
            int num2 = 3;
			
			// 10 / 3 = 3 * 3 + 1
			
			int result1;
			int result2;			
            Divide(num1, num2, out result1, out result2);
			
			Console.WriteLine(result1);  // 3
            Console.WriteLine(result2);  // 1
        }
		
		// ---- Method Overloading.  함수 이름의 재사용.  사전적 의미는 과적하다.
        /*
                static int Add(int a, int b)
                {
                    Console.WriteLine("Add int 호출");
                    return a + b;
                }

                static int Add(int a, int b, int c)
                {
                    Console.WriteLine("Add int 호출");
                    return a + b + c;
                }

                static float Add(float a, float b)
                {
                    Console.WriteLine("Add Float 호출");
                    return a + b;
                }
        */
        // 선택적 오버로딩. 필수와 옵션이 있다. 다 넣어줄거면 순서를 잘 지켜야 한다.
        //static int Add(int a, int b, int c = 0, float d = 1.0f, double e = 3.0)
        static int Add(int a, int b, int c = 0)  // a,b는 필수 입력, c는 선택적. 입력안하면 0
        {
            Console.WriteLine("Add int 호출");
            return a + b + c;
        }

        static void Main(string[] args)
        {
            /*            
                int ret = Program.Add(2, 3);
                float ret2 = Program.Add(2.0f, 3.0f);
                Console.WriteLine(ret);
            */
            int ret = Program.Add(2, 3);
            int ret2 = Program.Add(2, 3, 7);

            // Program.Add(2, 3, 7, 2.0f, 4.0);
            // Program.Add(2, 3, 7, d:2.0f);    // 다 채우지 않고 어떤 하나를 지정해서 넣어줄 수 있다.
        }	
		
		// ---- 재귀함수
		// 5! = 5 * 4 * 3 * 2 * 1
        // n! = n * (n - 1) *... * 1  (n >= 1)
/*        static int Factorial(int n)
        {
            int ret = 1;

            for (int num = 1; num <= n; num++)
            {
                //ret = ret * num;
                ret *= num;
                Console.Write($"ret={ret}, ");
                Console.WriteLine($"num={num}");                
            }

            return ret;

        }
*/
        // 재귀함수. 자기자신을 뭔가 반복해서 호출하는것.
        //           함수 안에서 자기자신을 조금만 다른 조건을 넣어서 
        //           또 호출하는 방법. 재귀함수 재귀메소드.
        // 5! = 5 * 4 * 3 * 2 * 1
        // 5! = 5 * (4!)
        // stack overflow. 함수호출하는데 무한대로 뺑뺑이 돌고 있는것.
        //                 그러다가 실행할수 있는 호출 스택의 한도를 넘어서는것.
        //                  그러다가 프로그램이 뻗는다.
        static int Factorial(int n) // 함수실행.
        {
/*            if (n <= 1)
                return 1;
*/
            // 재귀적으로 하나씩 줄여가지고 호출하는것 문제가 없지만
            // 언젠가는 끝이 나야하는데 그것을 지정해 주지 않았다.
            return n * Factorial(n - 1); // 함수호출.  위로. ... 무한 반복.
        }
        static void Main(string[] args)
        {
            // * 출력
            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j <= i; j++)
                    Console.Write("*");

                Console.WriteLine();
            }

            // 5! 값 출력
            /*            int ret = Factorial(5);
                        Console.WriteLine(ret);
            */

            // 디버깅. F11.   inseption(분리) 가 시작된거죠. 그냥 단어뜻 찾은거.
            int ret = Factorial(1);
        }	
		
		// ---- 디버깅 기초
			F9 	break point on/off
			F10
			F11
			call stack 을 이용하면 메소드 호출을 다 알 수 있다.
		
			break point 는 조건을 걸 수 있다.   ex) 특정 아이디의 몬스터의 정보를 알고  싶다.
		
			break point 를 마우스 왼쪽 버튼으로 쭉 끌어서 멈춤 곳(실행순서)를 바꿀 수 있다.
		
		// -----------------------------------
		// ---- 객체지향의 시작.
		// -----------------------------------		https://www.inflearn.com/course/%EC%9C%A0%EB%8B%88%ED%8B%B0-MMORPG-%EA%B0%9C%EB%B0%9C-part1/lecture/32805?tab=curriculum&speed=1.5
		
		절차(Procedure) 지향의 의미: 함수를 기반으로 뭔갈 만들겠다는 의미. 절차의 뜻이 Procedure 다. 번역 뉘앙스가 잘못된거.  앞의 textRPG가 Procedure지향의
		좋은 예.  빨리 만들수 있으나 유지보수의 문제가 있다. 함수 호출의 순서 중요.
		
		// -- 복사(값)와 참조
		https://www.inflearn.com/course/%EC%9C%A0%EB%8B%88%ED%8B%B0-MMORPG-%EA%B0%9C%EB%B0%9C-part1/lecture/32806?tab=note&speed=1.5
		
		기본적으로 Class는 Ref 참조, struct는 복사.
		clone, deep copy

		namespace ConsoleAppClassExp
		{
			// 객체지향프로그래밍 (OOP Object Oriented Programming) 객체가 중심인 프로그램 개발 기법.
			// 프로그램의 모든게 객체인..

			// Knight
			// 속성: hp, attack, pos
			// 기능: Move, Attack, Die
			// 클래스는 기본적으로 Ref 참조
			class Knight // Class <--  Knight 객체 설계도.
			{
				public int hp;
				public int attack;

				public Knight Cloen() // deep copy. 진퉁, 짝퉁이 아니고 아예 새로운 애를 만들어서 떠나보냄.
				{
					Knight knight = new Knight();
					knight.hp = hp;  // 자기자신의 hp
					knight.attack = attack; // 자기자신의 attack
					return knight;
				}

				public void Move()
				{
					Console.WriteLine("Knight Move");
				}

				public void Attack()
				{
					Console.WriteLine("Knight Attack");
				}
			}
			// 구조체는 기본적으로 복사로 인자 넘김.
			struct Mage
			{
				public int hp;
				public int attack;
			}
			class Program
			{
				static void KillMage(Mage mage)
				{
					mage.hp = 0;
				}
				static void KillKnight(Knight knight)
				{
					knight.hp = 0;
				}
				static void Main(string[] args)
				{
					Mage mage;
					mage.hp = 100;
					mage.attack = 50;
					//KillMage(mage);  // copy로 넘김.. 함수내에서 변경된 값과 다르다.
					// KillMage(ref mage);  // 이래야 진퉁 넘어감.

					Mage mage2 = mage;  // mage2에 복사로 넘김. mage, mage2는 별도의 마법사.
					mage2.hp = 0;

					// 설계도가 완성되었으면 실제로 건물을 세워야 되겠죠,
					Knight knight = new Knight();
					knight.hp = 100;
					knight.attack = 10;

					knight.Move();
					knight.Attack();

					// KillKnight(knight); // 진퉁 넘김. 기본적으로 클래스는 ref로 넘김. ref로 연산

					/*            Knight knight2 = knight;  // 같은 진퉁 기사. 클래스는 다시 말하지만 기본적으로 ref 연산.
								knight.hp = 0;
					*/

		/*          // 별도의 기사로 만들고 싶으면 new 하거나  deep copy 를 한다.
					Knight knight2 = new Knight();
					knight2.hp = knight.hp;
					knight2.attack = knight.attack;

					// Knight knight2 = knight.Cloen();
		*/
				}
			}
		}		
		
		// -- 스택과 힙 (메모리)
		https://www.inflearn.com/course/%EC%9C%A0%EB%8B%88%ED%8B%B0-MMORPG-%EA%B0%9C%EB%B0%9C-part1/lecture/32807?tab=note&speed=1.5
		
		stack: 임시, 함수안의 선언 변수들 사용. 일종의 메모장. 전혀 신경 쓸 필요 없다.
		           함수가 호출되고  종료되는 순간에 알아서 뭔가 줄었다가 늘었다가 한다.
				   잘 관리가 되고 있다.
		heap: 동적으로 할당하면, 즉 프로그램 실행시 실시간으로 heap 메모리에 공간 할당. 예를 들면 new 하면...
		
		----------------------------					----------------------------
		|											|					|											|
		| mage1 본체						|					| knight1 본체
		| mage2  본체						|					| knight2 본체
		| knight1 주소						|
		| knight2 주소						|
		|____________________________|					_____________________________
			stack														new(할당하면).. heap
																			깊은 복사.
		
		// -- 생성자
		https://www.inflearn.com/course/%EC%9C%A0%EB%8B%88%ED%8B%B0-MMORPG-%EA%B0%9C%EB%B0%9C-part1/lecture/32808?tab=note&speed=1.5
		
		생성자, this 키워드.
		class Knight // Class <--  Knight 객체 설계도.
		{
			public int hp;
			public int attack;
			
			public Knight()
			{
				hp = 100;
				attack = 10;
				Console.WriteLine("생성자 호출!");
			}
			public Knight(int hp) : this()  // 내자신의 빈 생성자를 호출 시켜줘.
			{
				this.hp = hp;
				Console.WriteLine("int 생성자 호출!");
			}	
			public Knight(int hp, int attack)// : this(hp) <-- 이런것도 가능.
			{
				this.hp = hp;
				this.attack = attack;
				Console.WriteLine("int,int 생성자 호출!");
			}			
		}
		
		// ----  static의 정체
			정적.
			// 정적 키워드 static을 붙이면 붕어빵틀에 종속적인 필드, 또는 함수가 되고,
			// 아닐경우 붕어빵, 각기 객체, 인스턴스에 종속적인 필드, 함수가 된다.
			
			class Knight
			{
				// 필드
				static public int counter; 	// 모든 객체들이 다 공유해서 1개만 사용한다. 
															// 즉, 오로지 1개만 존재!
				public int id;
				public int hp;
				public int attack;

				static public void Test()
				{
					counter++;  // 클래스 종속
					// id = 100; // 각기 객체의 필드 값은 사용 못함. 
				}
				
				// 그렇다고 instance에 접근 못하는것은 아니다.
				static public Knight CreateKnight()
				{
					Knight knight = new Knight();
					knight.hp = 100;
					knight.attack = 1;
					return knight;
				}
				
				public Knight()
				{
					id = counter;
					counter++;
					
					hp = 100;
					attack = 10;
					Console.WriteLine("생성자 호출!");
				}
			}
			/*
			Knight knight1 = new Knight();
			Knight knight2 = new Knight();
			Knight knight3 = new Knight();
			*/
			Knight.knight = Knight.CreateKnight(); //static
			knight.Move(); // 일반. 인스턴스.
			
		// -- 상속성
			// OOP(은닉성/상속성/다형성)
			 base
			
		// -- 은닉성	
